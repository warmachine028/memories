// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres", "driverAdapters"] //? https://github.com/prisma/prisma/discussions/23533#discussioncomment-8838160
    //* https://www.prisma.io/blog/prisma-optimize-early-access?utm_source=cli&utm_medium=promo-generate-v5-17&utm_campaign=--optimize
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Visibility {
    PUBLIC
    PRIVATE
}

model User {
    id        String  @id @default(uuid())
    firstName String
    lastName  String?
    email     String  @unique
    bio       String?
    imageUrl  String?

    posts         Post[]
    comments      Comment[]
    postReactions PostReaction[]
    commentLikes  CommentLike[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Post {
    id            String     @id @default(uuid())
    authorId      String
    title         String
    description   String
    imageUrl      String
    visibility    Visibility @default(PUBLIC)
    reactionCount Int        @default(0)

    tags      PostTag[]
    comments  Comment[]
    reactions PostReaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("posts")
}

model Tag {
    id   String @id @default(uuid())
    name String @unique

    posts PostTag[]

    @@map("tags")
}

model PostTag {
    postId String
    tagId  String

    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@id(name: "id", [postId, tagId])
    @@unique([postId, tagId])
    @@map("post_tags")
}

model Comment {
    id        String @id @default(uuid())
    postId    String
    authorId  String
    content   String
    likeCount Int    @default(0)

    likes CommentLike[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@map("comments")
}

model PostReaction {
    userId       String
    postId       String
    reactionType ReactionType

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@id([userId, postId])
    @@unique([userId, postId])
    @@map("post_reactions")
}

model CommentLike {
    userId    String
    commentId String

    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@id([userId, commentId])
    @@unique([userId, commentId])
    @@map("comment_likes")
}

enum ReactionType {
    LIKE
    LOVE
    HAHA
    WOW
    SAD
    ANGRY
}
